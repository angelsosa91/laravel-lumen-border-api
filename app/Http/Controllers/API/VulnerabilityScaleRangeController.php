<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use App\Models\VulnerabilityScaleRange as Range;
use Illuminate\Http\Request;

class VulnerabilityScaleRangeController extends Controller
{
    public function all()
    {
        $data = Range::all(); //orderBy("id", "asc")->get();
        //result
        return response()->json($data, 200);
    }

    public function validateRange($data)
    {
        return Range::where('desde','<=',$data)
            ->where('hasta','>=',$data)
            ->count(); //first()
    }

    //get order by rows
    public function show(Request $request)
    {
        //request
        $page = ($request->has('page')) ? intval($request->input('page')) : 1;
        $rows = ($request->has('rows')) ? intval($request->input('rows')) : 50;
        $sort = ($request->has('sort')) ? strval($request->input('sort')) : "id";
        $order = ($request->has('order')) ? strval($request->input('order')) : "asc";
        $offset = ($page-1)*$rows;
        //filters
        $search = Range::where('id', '>', 0);
        //count
        $count = $search->count();
        //This field uses a LIKE match, handle it separately
        if ($request->has('search') and !empty($request->input('search'))) {
            $search->where('rango', 'like', '%' . $request->input('search') . '%');
        }
        //query
        $data = $search->orderBy($sort, $order)->limit($rows)->offset($offset)->get();
        //var_dump($paises); //toSql()
        //array
        $result = array(); $items = array();
        //fetch
        foreach ($data as $u) {
            $object = new \stdClass();
            $object->id = $u->id;
            $object->rango = $u->rango;
            $object->desde = $u->desde;
            $object->hasta = $u->hasta;
            $object->created_at = date("d/m/Y H:i", strtotime($u->created_at));
            $object->updated_at = date("d/m/Y H:i", strtotime($u->updated_at));
            //push
            array_push($items, $object);
        }
        //result
        $result["total"] = $count;
        $result["rows"] = $items;
        //return
        return response()->json($result, 200);
    }
    //create
    public function create(Request $request)
    {
        //validate incoming request
        $this->validate($request, [
            'rango' => 'required|string',
            'desde' => 'required|integer',
            'hasta' => 'required|integer'
        ]);
        //validate range
        if( $this->validateRange($request->input('desde')) > 0 ){
            return response()->json(['message' => 'Rango Invalido'], 422);
        }
        if( $this->validateRange($request->input('hasta')) > 0 ){
            return response()->json(['message' => 'Rango Invalido'], 422);
        }
        //try
        try {
            //model
            $data = new Range;
            $data->rango = strtoupper($request->input('rango'));
            $data->desde = intval($request->input('desde'));
            $data->hasta = intval($request->input('hasta'));
            //save
            $data->save();
            //return successful response
            return response()->json(['data' => $data, 'message' => 'CREATED'], 201);
            //end
        } catch (\Exception $e) {
            //return error message
            return response()->json(['message' => 'Registration failed'], 409);
        }
    }
    //update
    public function update(Request $request, $id)
    {
        //validate incoming request
        $this->validate($request, [
            'rango' => 'required|string',
            'desde' => 'required|integer',
            'hasta' => 'required|integer'
        ]);
        //trye
        try {
            //find
            $data = Range::findOrFail($id);
            $data->update([
                'rango' => strtoupper($request->input('rango')),
                'desde' => intval($request->input('desde')),
                'hasta' => intval($request->input('hasta'))
            ]);
            //return successful response
            return response()->json(['data' => $data, 'message' => 'UPDATED'], 201);
            //end
        } catch (\Exception $e) {
            //return error message
            return response()->json(['message' => 'Updated Failed!'], 409);
        }
    }
    //delete
    /*public function delete($id)
    {
        //trye
        try {
            //find
            $data = VulnerabilityScale::findOrFail($id);
            $data->delete();
            //return successful response
            return response()->json(['message' => 'DELETED'], 201);
            //end
        } catch (\Exception $e) {
            //return error message
            return response()->json(['message' => 'Deleted Failed!'], 409);
        }
    }*/
}
